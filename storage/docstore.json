{"docstore/metadata": {"2ec04f1c-2e64-4778-b932-83a3c48c1dc6": {"doc_hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce"}, "688cb84b-cc94-40bd-a2b9-a4e08af1d24d": {"doc_hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0"}, "79ca23ff-ccdf-4726-bb72-699ba2a08f82": {"doc_hash": "686c529882c0df762ef0fc37cb3bedac8f153c9cef652317c55a5feb4de332ab"}, "d7183e10-924e-4318-a274-37c07b3ccde6": {"doc_hash": "569ffbce696c52f5687c4bdb033d49bda9b291e1ba935f8ec43d7a0ebaf53467", "ref_doc_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6"}, "390c2553-a384-43f0-b771-b12865273c74": {"doc_hash": "d3a6886a610d7f9d486b73c2aa937048c5a9493d722daa7116f920364e354f28", "ref_doc_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6"}, "c1d59dd5-1b58-492b-ac87-4988bba89311": {"doc_hash": "8ff00903a548055414a9486b1f087295c155a3acea11c000dc5610c245337328", "ref_doc_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6"}, "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8": {"doc_hash": "e799a73801e13526e367586382ba6f8b5d15e1c1138577a959b36cd202b4abb6", "ref_doc_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6"}, "373dc6d4-f314-404e-b5f9-ea60863682f1": {"doc_hash": "8b2f68a30a5725d7690442e9c5ffc159a7f638ceca965495a54825ca2e4a1802", "ref_doc_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6"}, "1361e285-35f3-4344-b1df-c073532fd75d": {"doc_hash": "68d5af8987117d1816d07ce289fdb087a733e6ab1708859af43ac53c07a192c0", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "f877044c-7055-482a-9b93-2594b4f69baa": {"doc_hash": "38b2a310833875451b61b40a7902bbd62664b28b77edbc92d825fb0a8f209b85", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "2da1c1f4-3019-46cb-b207-7b9a467da07c": {"doc_hash": "c0e8f3d08b5f0519acc1c205837fe00dd346c7ae21c17f919101cc6f9d6d16a5", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b": {"doc_hash": "057774ef6adc72b89cb199bcf98813152b67e479845625deb4428ea6bd159d9b", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "11cea5cc-5531-48a3-be16-bb4eb57fb7a5": {"doc_hash": "24f5a0d92a083c071a8011991b10703db8ed776e9c082c889c2f4b2cf99d40a2", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "b9eacc95-1fb5-4811-bf4d-58d37f0bc676": {"doc_hash": "d795f36c1a7f5ddf95f2987b797f8797bc66ac1d39d91c4fd43a2fee54490197", "ref_doc_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d"}, "8ecae425-e169-471c-97a8-3977666babfc": {"doc_hash": "74576e64f53e3018dbd967bc2b52b45b8ed89ac96518556c63c0b832e27f76b1", "ref_doc_id": "79ca23ff-ccdf-4726-bb72-699ba2a08f82"}}, "docstore/data": {"d7183e10-924e-4318-a274-37c07b3ccde6": {"__data__": {"id_": "d7183e10-924e-4318-a274-37c07b3ccde6", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "390c2553-a384-43f0-b771-b12865273c74", "node_type": "1", "metadata": {}, "hash": "5a99966585ab5525a72ffc44b0e22cb13512dfe8be845e8be3454347ad1ddd8b", "class_name": "RelatedNodeInfo"}}, "text": "artificial intelligence\r\nArtificial intelligence (AI), the ability of a digital computer or computer-controlled robot to perform tasks commonly associated with intelligent beings. The term is frequently applied to the project of developing systems endowed with the intellectual processes characteristic of humans, such as the ability to reason, discover meaning, generalize, or learn from past experience. Since the development of the digital computer in the 1940s, it has been demonstrated that computers can be programmed to carry out very complex tasks\u2014such as discovering proofs for mathematical theorems or playing chess\u2014with great proficiency. Still, despite continuing advances in computer processing speed and memory capacity, there are as yet no programs that can match full human flexibility over wider domains or in tasks requiring much everyday knowledge. On the other hand, some programs have attained the performance levels of human experts and professionals in performing certain specific tasks, so that artificial intelligence in this limited sense is found in applications as diverse as medical diagnosis, computer search engines, voice or handwriting recognition, and chatbots.\r\n(Read Ray Kurzweil\u2019s Britannica essay on the future of \u201cNonbiological Man.\u201d)\r\nWhat is intelligence?\r\nAll but the simplest human behaviour is ascribed to intelligence, while even the most complicated insect behaviour is usually not taken as an indication of intelligence. What is the difference? Consider the behaviour of the digger wasp, Sphex ichneumoneus. When the female wasp returns to her burrow with food, she first deposits it on the threshold, checks for intruders inside her burrow, and only then, if the coast is clear, carries her food inside. The real nature of the wasp\u2019s instinctual behaviour is revealed if the food is moved a few inches away from the entrance to her burrow while she is inside: on emerging, she will repeat the whole procedure as often as the food is displaced. Intelligence\u2014conspicuously absent in the case of Sphex\u2014must include the ability to adapt to new circumstances.\r\nPsychologists generally characterize human intelligence not by just one trait but by the combination of many diverse abilities. Research in AI has focused chiefly on the following components of intelligence: learning, reasoning, problem solving, perception, and using language.\r\nLearning\r\nThere are a number of different forms of learning as applied to artificial intelligence. The simplest is learning by trial and error. For example, a simple computer program for solving mate-in-one chess problems might try moves at random until mate is found. The program might then store the solution with the position so that the next time the computer encountered the same position it would recall the solution. This simple memorizing of individual items and procedures\u2014known as rote learning\u2014is relatively easy to implement on a computer. More challenging is the problem of implementing what is called generalization. Generalization involves applying past experience to analogous new situations. For example, a program that learns the past tense of regular English verbs by rote will not be able to produce the past tense of a word such as jump unless it previously had been presented with jumped, whereas a program that is able to generalize can learn the \u201cadd ed\u201d rule and so form the past tense of jump based on experience with similar verbs.\r\n\r\n\r\nReasoning\r\nTo reason is to draw inferences appropriate to the situation. Inferences are classified as either deductive or inductive. An example of the former is, \u201cFred must be in either the museum or the caf\u00e9.", "start_char_idx": 0, "end_char_idx": 3656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "390c2553-a384-43f0-b771-b12865273c74": {"__data__": {"id_": "390c2553-a384-43f0-b771-b12865273c74", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7183e10-924e-4318-a274-37c07b3ccde6", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "569ffbce696c52f5687c4bdb033d49bda9b291e1ba935f8ec43d7a0ebaf53467", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1d59dd5-1b58-492b-ac87-4988bba89311", "node_type": "1", "metadata": {}, "hash": "881ce04425ac6aba85bb9dd1992846ee3dfce1acbe1ccb0580b56bb6a2fecb80", "class_name": "RelatedNodeInfo"}}, "text": "An example of the former is, \u201cFred must be in either the museum or the caf\u00e9. He is not in the caf\u00e9; therefore he is in the museum,\u201d and of the latter, \u201cPrevious accidents of this sort were caused by instrument failure; therefore this accident was caused by instrument failure.\u201d The most significant difference between these forms of reasoning is that in the deductive case the truth of the premises guarantees the truth of the conclusion, whereas in the inductive case the truth of the premise lends support to the conclusion without giving absolute assurance. Inductive reasoning is common in science, where data are collected and tentative models are developed to describe and predict future behaviour\u2014until the appearance of anomalous data forces the model to be revised. Deductive reasoning is common in mathematics and logic, where elaborate structures of irrefutable theorems are built up from a small set of basic axioms and rules.\r\nThere has been considerable success in programming computers to draw inferences. However, true reasoning involves more than just drawing inferences: it involves drawing inferences relevant to the solution of the particular task or situation. This is one of the hardest problems confronting AI.\r\nProblem solving\r\nProblem solving, particularly in artificial intelligence, may be characterized as a systematic search through a range of possible actions in order to reach some predefined goal or solution. Problem-solving methods divide into special purpose and general purpose. A special-purpose method is tailor-made for a particular problem and often exploits very specific features of the situation in which the problem is embedded. In contrast, a general-purpose method is applicable to a wide variety of problems. One general-purpose technique used in AI is means-end analysis\u2014a step-by-step, or incremental, reduction of the difference between the current state and the final goal. The program selects actions from a list of means\u2014in the case of a simple robot this might consist of PICKUP, PUTDOWN, MOVEFORWARD, MOVEBACK, MOVELEFT, and MOVERIGHT\u2014until the goal is reached.\r\nMany diverse problems have been solved by artificial intelligence programs. Some examples are finding the winning move (or sequence of moves) in a board game, devising mathematical proofs, and manipulating \u201cvirtual objects\u201d in a computer-generated world.\r\nPerception\r\nIn perception the environment is scanned by means of various sensory organs, real or artificial, and the scene is decomposed into separate objects in various spatial relationships. Analysis is complicated by the fact that an object may appear different depending on the angle from which it is viewed, the direction and intensity of illumination in the scene, and how much the object contrasts with the surrounding field.\r\nOne of the earliest systems to integrate perception and action was FREDDY, a stationary robot with a moving television eye and a pincer hand, constructed at the University of Edinburgh, Scotland, during the period 1966\u201373 under the direction of Donald Michie. FREDDY was able to recognize a variety of objects and could be instructed to assemble simple artifacts, such as a toy car, from a random heap of components. At present, artificial perception is sufficiently advanced to enable optical sensors to identify individuals and autonomous vehicles to drive at moderate speeds on the open road.\r\nLanguage\r\nA language is a system of signs having meaning by convention. In this sense, language need not be confined to the spoken word. Traffic signs, for example, form a mini-language, it being a matter of convention that \u26a0 means \u201chazard ahead\u201d in some countries.", "start_char_idx": 3580, "end_char_idx": 7250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1d59dd5-1b58-492b-ac87-4988bba89311": {"__data__": {"id_": "c1d59dd5-1b58-492b-ac87-4988bba89311", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "390c2553-a384-43f0-b771-b12865273c74", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "d3a6886a610d7f9d486b73c2aa937048c5a9493d722daa7116f920364e354f28", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8", "node_type": "1", "metadata": {}, "hash": "c56de08e1ed1ed1a85628efecf3163cdf289aa7f72e0d136822c822bdfc3125d", "class_name": "RelatedNodeInfo"}}, "text": "It is distinctive of languages that linguistic units possess meaning by convention, and linguistic meaning is very different from what is called natural meaning, exemplified in statements such as \u201cThose clouds mean rain\u201d and \u201cThe fall in pressure means the valve is malfunctioning.\u201d\r\nAn important characteristic of full-fledged human languages\u2014in contrast to birdcalls and traffic signs\u2014is their productivity. A productive language can formulate an unlimited variety of sentences.\r\nLarge language models like ChatGPT can respond fluently in a human language to questions and statements. Although such models do not actually understand language as humans do but merely select words that are more probable than others, they have reached the point where their command of a language is indistinguishable from that of a normal human. What, then, is involved in genuine understanding, if even a computer that uses language like a native human speaker is not acknowledged to understand? There is no universally agreed upon answer to this difficult question.\r\nMethods and goals in AI\r\nSymbolic vs. connectionist approaches\r\nAI research follows two distinct, and to some extent competing, methods, the symbolic (or \u201ctop-down\u201d) approach, and the connectionist (or \u201cbottom-up\u201d) approach. The top-down approach seeks to replicate intelligence by analyzing cognition independent of the biological structure of the brain, in terms of the processing of symbols\u2014whence the symbolic label. The bottom-up approach, on the other hand, involves creating artificial neural networks in imitation of the brain\u2019s structure\u2014whence the connectionist label.\r\nTo illustrate the difference between these approaches, consider the task of building a system, equipped with an optical scanner, that recognizes the letters of the alphabet. A bottom-up approach typically involves training an artificial neural network by presenting letters to it one by one, gradually improving performance by \u201ctuning\u201d the network. (Tuning adjusts the responsiveness of different neural pathways to different stimuli.) In contrast, a top-down approach typically involves writing a computer program that compares each letter with geometric descriptions. Simply put, neural activities are the basis of the bottom-up approach, while symbolic descriptions are the basis of the top-down approach.\r\nIn The Fundamentals of Learning (1932), Edward Thorndike, a psychologist at Columbia University, New York City, first suggested that human learning consists of some unknown property of connections between neurons in the brain. In The Organization of Behavior (1949), Donald Hebb, a psychologist at McGill University, Montreal, Canada, suggested that learning specifically involves strengthening certain patterns of neural activity by increasing the probability (weight) of induced neuron firing between the associated connections. The notion of weighted connections is described in a later section, Connectionism.\r\nIn 1957 two vigorous advocates of symbolic AI\u2014Allen Newell, a researcher at the RAND Corporation, Santa Monica, California, and Herbert Simon, a psychologist and computer scientist at Carnegie Mellon University, Pittsburgh, Pennsylvania\u2014summed up the top-down approach in what they called the physical symbol system hypothesis. This hypothesis states that processing structures of symbols is sufficient, in principle, to produce artificial intelligence in a digital computer and that, moreover, human intelligence is the result of the same type of symbolic manipulations.\r\n\r\n\r\nDuring the 1950s and \u201960s the top-down and bottom-up approaches were pursued simultaneously, and both achieved noteworthy, if limited, results. During the 1970s, however, bottom-up AI was neglected, and it was not until the 1980s that this approach again became prominent. Nowadays both approaches are followed, and both are acknowledged as facing difficulties. Symbolic techniques work in simplified realms but typically break down when confronted with the real world; meanwhile, bottom-up researchers have been unable to replicate the nervous systems of even the simplest living things.", "start_char_idx": 7251, "end_char_idx": 11373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8": {"__data__": {"id_": "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1d59dd5-1b58-492b-ac87-4988bba89311", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ff00903a548055414a9486b1f087295c155a3acea11c000dc5610c245337328", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "373dc6d4-f314-404e-b5f9-ea60863682f1", "node_type": "1", "metadata": {}, "hash": "5ac723bf57d73c661de27a3412766ff093e60e6931d1686239efdef7f858e8e2", "class_name": "RelatedNodeInfo"}}, "text": "Caenorhabditis elegans, a much-studied worm, has approximately 300 neurons whose pattern of interconnections is perfectly known. Yet connectionist models have failed to mimic even this worm. Evidently, the neurons of connectionist theory are gross oversimplifications of the real thing.\r\nArtificial general intelligence (AGI), applied AI, and cognitive simulation\r\nEmploying the methods outlined above, AI research attempts to reach one of three goals: artificial general intelligence (AGI), applied AI, or cognitive simulation. AGI (also called strong AI) aims to build machines that think. The ultimate ambition of AGI is to produce a machine whose overall intellectual ability is indistinguishable from that of a human being. As is described in the section Early milestones in AI, this goal generated great interest in the 1950s and \u201960s, but such optimism has given way to an appreciation of the extreme difficulties involved. To date, progress has been meagre. Some critics doubt whether research will produce even a system with the overall intellectual ability of an ant in the foreseeable future. Indeed, some researchers working in AI\u2019s other two branches view AGI as not worth pursuing.\r\nApplied AI, also known as advanced information processing, aims to produce commercially viable \u201csmart\u201d systems\u2014for example, \u201cexpert\u201d medical diagnosis systems and stock-trading systems. Applied AI has enjoyed considerable success, as described in the section Expert systems.\r\nIn cognitive simulation, computers are used to test theories about how the human mind works\u2014for example, theories about how people recognize faces or recall memories. Cognitive simulation is already a powerful tool in both neuroscience and cognitive psychology.\r\nAlan Turing and the beginning of AI\r\nTheoretical work\r\nThe earliest substantial work in the field of artificial intelligence was done in the mid-20th century by the British logician and computer pioneer Alan Mathison Turing. In 1935 Turing described an abstract computing machine consisting of a limitless memory and a scanner that moves back and forth through the memory, symbol by symbol, reading what it finds and writing further symbols. The actions of the scanner are dictated by a program of instructions that also is stored in the memory in the form of symbols. This is Turing\u2019s stored-program concept, and implicit in it is the possibility of the machine operating on, and so modifying or improving, its own program. Turing\u2019s conception is now known simply as the universal Turing machine. All modern computers are in essence universal Turing machines.\r\nDuring World War II, Turing was a leading cryptanalyst at the Government Code and Cypher School in Bletchley Park, Buckinghamshire, England. Turing could not turn to the project of building a stored-program electronic computing machine until the cessation of hostilities in Europe in 1945. Nevertheless, during the war he gave considerable thought to the issue of machine intelligence. One of Turing\u2019s colleagues at Bletchley Park, Donald Michie (who later founded the Department of Machine Intelligence and Perception at the University of Edinburgh), later recalled that Turing often discussed how computers could learn from experience as well as solve new problems through the use of guiding principles\u2014a process now known as heuristic problem solving.\r\nTuring gave quite possibly the earliest public lecture (London, 1947) to mention computer intelligence, saying, \u201cWhat we want is a machine that can learn from experience,\u201d and that the \u201cpossibility of letting the machine alter its own instructions provides the mechanism for this.\u201d In 1948 he introduced many of the central concepts of AI in a report entitled \u201cIntelligent Machinery.\u201d However, Turing did not publish this paper, and many of his ideas were later reinvented by others.", "start_char_idx": 11374, "end_char_idx": 15211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "373dc6d4-f314-404e-b5f9-ea60863682f1": {"__data__": {"id_": "373dc6d4-f314-404e-b5f9-ea60863682f1", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec04f1c-2e64-4778-b932-83a3c48c1dc6", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8ee038c574693e34cf743cd4ffb78239a71c4e67f505de0c0507baa0a2a2a0ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "e799a73801e13526e367586382ba6f8b5d15e1c1138577a959b36cd202b4abb6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1361e285-35f3-4344-b1df-c073532fd75d", "node_type": "1", "metadata": {}, "hash": "1f67ac65f813296b806fa07de94b83208fd7f5e47cf97b67c1d8f73f8497ea3b", "class_name": "RelatedNodeInfo"}}, "text": "For instance, one of Turing\u2019s original ideas was to train a network of artificial neurons to perform specific tasks, an approach described in the section Connectionism.\r\nChess\r\nAt Bletchley Park, Turing illustrated his ideas on machine intelligence by reference to chess\u2014a useful source of challenging and clearly defined problems against which proposed methods for problem solving could be tested. In principle, a chess-playing computer could play by searching exhaustively through all the available moves, but in practice this is impossible because it would involve examining an astronomically large number of moves. Heuristics are necessary to guide a narrower, more discriminative search. Although Turing experimented with designing chess programs, he had to content himself with theory in the absence of a computer to run his chess program. The first true AI programs had to await the arrival of stored-program electronic digital computers.\r\n\r\n\r\nMore From Britannica\r\nWorld chess champion Garry Kasparov (left) taking a pawn in the opening minutes of a six-game, six-day chess match against IBM's Deep Blue computer in Philadelphia, February 10, 1996. Feng-hsiung Hsu (right), the principal designer of Deep Blue, keys a move into the computer. The computer, capable of computing 200 million positions per second, was powerful enough to be comparable to Kasparov in its level of play.\r\n(more)\r\nIn 1945 Turing predicted that computers would one day play very good chess, and just over 50 years later, in 1997, Deep Blue, a chess computer built by IBM (International Business Machines Corporation), beat the reigning world champion, Garry Kasparov, in a six-game match. While Turing\u2019s prediction came true, his expectation that chess programming would contribute to the understanding of how human beings think did not. The huge improvement in computer chess since Turing\u2019s day is attributable to advances in computer engineering rather than advances in AI: Deep Blue\u2019s 256 parallel processors enabled it to examine 200 million possible moves per second and to look ahead as many as 14 turns of play. Many agree with Noam Chomsky, a linguist at the Massachusetts Institute of Technology (MIT), who opined that a computer beating a grandmaster at chess is about as interesting as a bulldozer winning an Olympic weightlifting competition.", "start_char_idx": 15212, "end_char_idx": 17550, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1361e285-35f3-4344-b1df-c073532fd75d": {"__data__": {"id_": "1361e285-35f3-4344-b1df-c073532fd75d", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "373dc6d4-f314-404e-b5f9-ea60863682f1", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "8b2f68a30a5725d7690442e9c5ffc159a7f638ceca965495a54825ca2e4a1802", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f877044c-7055-482a-9b93-2594b4f69baa", "node_type": "1", "metadata": {}, "hash": "e16642ad60a4baa751ddac20afd359f79d0d4bf441884a913bae7e04096d43aa", "class_name": "RelatedNodeInfo"}}, "text": "What is machine learning?\nMachine learning is a branch of artificial intelligence (AI) and computer science which\nfocuses on the use of data and algorithms to imitate the way that humans learn,\ngradually improving its accuracy.\nIBM has a rich history with machine learning. One of its own, Arthur Samuel, is credited\nfor coining the term, \u201cmachine learning\u201d with his research (link resides outside ibm.com)\naround the game of checkers. Robert Nealey, the self-proclaimed checkers master,\nplayed the game on an IBM 7094 computer in 1962, and he lost to the computer.\nCompared to what can be done today, this feat seems trivial, but it\u2019s considered a major\nmilestone in the field of artificial intelligence.\nOver the last couple of decades, the technological advances in storage and processing\npower have enabled some innovative products based on machine learning, such as\nNetflix\u2019s recommendation engine and self-driving cars.\nMachine learning is an important component of the growing field of data science.\nThrough the use of statistical methods, algorithms are trained to make classifications or\npredictions, and to uncover key insights in data mining projects. These insights\nsubsequently drive decision making within applications and businesses, ideally\nimpacting key growth metrics. As big data continues to expand and grow, the market\ndemand for new data scientists will increase. They will be required to help identify the\nmost relevant business questions and the data to answer them.\nMachine learning algorithms are typically created using frameworks such as Python that\naccelerate solution development by using platforms like TensorFlow or PyTorch.\nNow available: watsonx.ai\nThe all-new enterprise studio that brings together traditional machine learning along\nwith new generative AI capabilities powered by foundation models.\nTry watsonx.ai\nBegin your journey to AI\nLearn how to scale AI\nExplore the AI Academy\nMachine Learning vs. Deep Learning vs. Neural Networks\nSince deep learning and machine learning tend to be used interchangeably, it\u2019s worth\nnoting the nuances between the two. Machine learning, deep learning, and neural\nnetworks are all sub-fields of artificial intelligence. However, neural networks is actually\na sub-field of machine learning, and deep learning is a sub-field of neural networks.\nThe way in which deep learning and machine learning differ is in how each algorithm\nlearns. \"Deep\" machine learning can use labeled datasets, also known as supervised\nlearning, to inform its algorithm, but it doesn\u2019t necessarily require a labeled dataset. The\ndeep learning process can ingest unstructured data in its raw form (e.g., text or images),\nand it can automatically determine the set of features which distinguish different\ncategories of data from one another. This eliminates some of the human intervention\nrequired and enables the use of large amounts of data. You can think of deep learning\nas \"scalable machine learning\" as Lex Fridman notes in this MIT lecture (link resides\noutside ibm.com).\nClassical, or \"non-deep,\" machine learning is more dependent on human intervention to\nlearn. Human experts determine the set of features to understand the differences\nbetween data inputs, usually requiring more structured data to learn.\nNeural networks, or artificial neural networks (ANNs), are comprised of node layers,\ncontaining an input layer, one or more hidden layers, and an output layer. Each node, or\nartificial neuron, connects to another and has an associated weight and threshold. If the\noutput of any individual node is above the specified threshold value, that node is\nactivated, sending data to the next layer of the network. Otherwise, no data is passed\nalong to the next layer of the network by that node.", "start_char_idx": 0, "end_char_idx": 3750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f877044c-7055-482a-9b93-2594b4f69baa": {"__data__": {"id_": "f877044c-7055-482a-9b93-2594b4f69baa", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1361e285-35f3-4344-b1df-c073532fd75d", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "68d5af8987117d1816d07ce289fdb087a733e6ab1708859af43ac53c07a192c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2da1c1f4-3019-46cb-b207-7b9a467da07c", "node_type": "1", "metadata": {}, "hash": "0160d5360025328f6e86dbed25e6aa3585d9857bd33952fd65ceeb9c39cfa1f2", "class_name": "RelatedNodeInfo"}}, "text": "Otherwise, no data is passed\nalong to the next layer of the network by that node. The \u201cdeep\u201d in deep learning is just\nreferring to the number of layers in a neural network. A neural network that consists of\nmore than three layers\u2014which would be inclusive of the input and the output\u2014can be\nconsidered a deep learning algorithm or a deep neural network. A neural network that\nonly has three layers is just a basic neural network.\nDeep learning and neural networks are credited with accelerating progress in areas\nsuch as computer vision, natural language processing, and speech recognition.\nSee the blog post \u201cAI vs. Machine Learning vs. Deep Learning vs. Neural Networks:\nWhat\u2019s the Difference?\u201d for a closer look at how the different concepts relate.\nRelated content\nExplore the watsonx.ai interactive demo\nDownload \u201cMachine learning for Dummies\u201d\n- This link downloads a pdf\nExplore Gen AI for developers\nHow does machine learning work?\nUC Berkeley (link resides outside ibm.com) breaks out the learning system of a\nmachine learning algorithm into three main parts.\nA Decision Process: In general, machine learning algorithms are used to make a\nprediction or classification. Based on some input data, which can be labeled or\nunlabeled, your algorithm will produce an estimate about a pattern in the data.\nAn Error Function: An error function evaluates the prediction of the model. If\nthere are known examples, an error function can make a comparison to assess\nthe accuracy of the model.\nA Model Optimization Process: If the model can fit better to the data points in the\ntraining set, then weights are adjusted to reduce the discrepancy between the\nknown example and the model estimate. The algorithm will repeat this iterative\n\u201cevaluate and optimize\u201d process, updating weights autonomously until a\nthreshold of accuracy has been met.\nMachine learning methods\nMachine learning models fall into three primary categories.\nSupervised machine learning\nSupervised learning, also known as supervised machine learning, is defined by its use\nof labeled datasets to train algorithms to classify data or predict outcomes accurately.\nAs input data is fed into the model, the model adjusts its weights until it has been fitted\nappropriately. This occurs as part of the cross validation process to ensure that the\nmodel avoids overfitting or underfitting. Supervised learning helps organizations solve a\nvariety of real-world problems at scale, such as classifying spam in a separate folder\nfrom your inbox. Some methods used in supervised learning include neural networks,\nna\u00efve bayes, linear regression, logistic regression, random forest, and support vector\nmachine (SVM).\nUnsupervised machine learning\nUnsupervised learning, also known as unsupervised machine learning, uses machine\nlearning algorithms to analyze and cluster unlabeled datasets (subsets called clusters).\nThese algorithms discover hidden patterns or data groupings without the need for\nhuman intervention. This method\u2019s ability to discover similarities and differences in\ninformation make it ideal for exploratory data analysis, cross-selling strategies,\ncustomer segmentation, and image and pattern recognition. It\u2019s also used to reduce the\nnumber of features in a model through the process of dimensionality reduction. Principal\ncomponent analysis (PCA) and singular value decomposition (SVD) are two common\napproaches for this. Other algorithms used in unsupervised learning include neural\nnetworks, k-means clustering, and probabilistic clustering methods.\nSemi-supervised learning\nSemi-supervised learning offers a happy medium between supervised and\nunsupervised learning. During training, it uses a smaller labeled data set to guide\nclassification and feature extraction from a larger, unlabeled data set.", "start_char_idx": 3669, "end_char_idx": 7440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2da1c1f4-3019-46cb-b207-7b9a467da07c": {"__data__": {"id_": "2da1c1f4-3019-46cb-b207-7b9a467da07c", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f877044c-7055-482a-9b93-2594b4f69baa", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "38b2a310833875451b61b40a7902bbd62664b28b77edbc92d825fb0a8f209b85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b", "node_type": "1", "metadata": {}, "hash": "8041c1b2f65657b90391f295b0a8fd9856fb0a989b0361082ee7b56955d4ca60", "class_name": "RelatedNodeInfo"}}, "text": "Semi-supervised\nlearning can solve the problem of not having enough labeled data for a supervised\nlearning algorithm. It also helps if it\u2019s too costly to label enough data.\nFor a deep dive into the differences between these approaches, check out \"Supervised\nvs. Unsupervised Learning: What's the Difference?\"\nReinforcement machine learning\nReinforcement machine learning is a machine learning model that is similar to\nsupervised learning, but the algorithm isn\u2019t trained using sample data. This model learns\nas it goes by using trial and error. A sequence of successful outcomes will be reinforced\nto develop the best recommendation or policy for a given problem.\nThe IBM Watson\u00ae system that won the Jeopardy! challenge in 2011 is a good example.\nThe system used reinforcement learning to learn when to attempt an answer (or\nquestion, as it were), which square to select on the board, and how much to\nwager\u2014especially on daily doubles.\nLearn more about reinforcement learning\nCommon machine learning algorithms\nA number of machine learning algorithms are commonly used. These include:\nNeural networks: Neural networks simulate the way the human brain works, with\na huge number of linked processing nodes. Neural networks are good at\nrecognizing patterns and play an important role in applications including natural\nlanguage translation, image recognition, speech recognition, and image creation.\nLinear regression: This algorithm is used to predict numerical values, based on a\nlinear relationship between different values. For example, the technique could be\nused to predict house prices based on historical data for the area.\nLogistic regression: This supervised learning algorithm makes predictions for\ncategorical response variables, such as \u201cyes/no\u201d answers to questions. It can be\nused for applications such as classifying spam and quality control on a\nproduction line.\nClustering: Using unsupervised learning, clustering algorithms can identify\npatterns in data so that it can be grouped. Computers can help data scientists by\nidentifying differences between data items that humans have overlooked.\nDecision trees: Decision trees can be used for both predicting numerical values\n(regression) and classifying data into categories. Decision trees use a branching\nsequence of linked decisions that can be represented with a tree diagram. One of\nthe advantages of decision trees is that they are easy to validate and audit,\nunlike the black box of the neural network.\nRandom forests: In a random forest, the machine learning algorithm predicts a\nvalue or category by combining the results from a number of decision trees.\nAdvantages and disadvantages of machine learning algorithms\nDepending on your budget, need for speed and precision required, each algorithm\ntype\u2014supervised, unsupervised, semi-supervised, or reinforcement\u2014has its own\nadvantages and disadvantages. For example, decision tree algorithms are used for both\npredicting numerical values (regression problems) and classifying data into categories.\nDecision trees use a branching sequence of linked decisions that may be represented\nwith a tree diagram. A prime advantage of decision trees is that they are easier to\nvalidate and audit than a neural network. The bad news is that they can be more\nunstable than other decision predictors.\nOverall, there are many advantages to machine learning that businesses can leverage\nfor new efficiencies. These include machine learning identifying patterns and trends in\nmassive volumes of data that humans might not spot at all. And this analysis requires\nlittle human intervention: just feed in the dataset of interest and let the machine learning\nsystem assemble and refine its own algorithms\u2014which will continually improve with\nmore data input over time. Customers and users can enjoy a more personalized\nexperience as the model learns more with every experience with that person.", "start_char_idx": 7441, "end_char_idx": 11331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b": {"__data__": {"id_": "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2da1c1f4-3019-46cb-b207-7b9a467da07c", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "c0e8f3d08b5f0519acc1c205837fe00dd346c7ae21c17f919101cc6f9d6d16a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11cea5cc-5531-48a3-be16-bb4eb57fb7a5", "node_type": "1", "metadata": {}, "hash": "33c6ae8b7348f3d12bf210276446e74db66a6e1e691fd116dc9c8e7b640aaacd", "class_name": "RelatedNodeInfo"}}, "text": "On the downside, machine learning requires large training datasets that are accurate\nand unbiased. GIGO is the operative factor: garbage in / garbage out. Gathering\nsufficient data and having a system robust enough to run it might also be a drain on\nresources. Machine learning can also be prone to error, depending on the input. With\ntoo small a sample, the system could produce a perfectly logical algorithm that is\ncompletely wrong or misleading. To avoid wasting budget or displeasing customers,\norganizations should act on the answers only when there is high confidence in the\noutput.\nReal-world machine learning use cases\nHere are just a few examples of machine learning you might encounter every day:\nSpeech recognition: It is also known as automatic speech recognition (ASR), computer\nspeech recognition, or speech-to-text, and it is a capability which uses natural language\nprocessing (NLP) to translate human speech into a written format. Many mobile devices\nincorporate speech recognition into their systems to conduct voice search\u2014e.g. Siri\u2014or\nimprove accessibility for texting.\nCustomer service: Online chatbots are replacing human agents along the customer\njourney, changing the way we think about customer engagement across websites and\nsocial media platforms. Chatbots answer frequently asked questions (FAQs) about\ntopics such as shipping, or provide personalized advice, cross-selling products or\nsuggesting sizes for users. Examples include virtual agents on e-commerce sites;\nmessaging bots, using Slack and Facebook Messenger; and tasks usually done by\nvirtual assistants and voice assistants.\nComputer vision: This AI technology enables computers to derive meaningful\ninformation from digital images, videos, and other visual inputs, and then take the\nappropriate action. Powered by convolutional neural networks, computer vision has\napplications in photo tagging on social media, radiology imaging in healthcare, and\nself-driving cars in the automotive industry.\nRecommendation engines: Using past consumption behavior data, AI algorithms can\nhelp to discover data trends that can be used to develop more effective cross-selling\nstrategies. Recommendation engines are used by online retailers to make relevant\nproduct recommendations to customers during the checkout process.\nRobotic process automation (RPA): Also known as software robotics, RPA uses\nintelligent automation technologies to perform repetitive manual tasks.\nAutomated stock trading: Designed to optimize stock portfolios, AI-driven\nhigh-frequency trading platforms make thousands or even millions of trades per day\nwithout human intervention.\nFraud detection: Banks and other financial institutions can use machine learning to spot\nsuspicious transactions. Supervised learning can train a model using information about\nknown fraudulent transactions. Anomaly detection can identify transactions that look\natypical and deserve further investigation.\nChallenges of machine learning\nAs machine learning technology has developed, it has certainly made our lives easier.\nHowever, implementing machine learning in businesses has also raised a number of\nethical concerns about AI technologies. Some of these include:\nTechnological singularity\nWhile this topic garners a lot of public attention, many researchers are not concerned\nwith the idea of AI surpassing human intelligence in the near future. Technological\nsingularity is also referred to as strong AI or superintelligence. Philosopher Nick\nBostrum defines superintelligence as \u201cany intellect that vastly outperforms the best\nhuman brains in practically every field, including scientific creativity, general wisdom,\nand social skills.\u201d Despite the fact that superintelligence is not imminent in society, the\nidea of it raises some interesting questions as we consider the use of autonomous\nsystems, like self-driving cars. It\u2019s unrealistic to think that a driverless car would never\nhave an accident, but who is responsible and liable under those circumstances?", "start_char_idx": 11332, "end_char_idx": 15331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11cea5cc-5531-48a3-be16-bb4eb57fb7a5": {"__data__": {"id_": "11cea5cc-5531-48a3-be16-bb4eb57fb7a5", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "057774ef6adc72b89cb199bcf98813152b67e479845625deb4428ea6bd159d9b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9eacc95-1fb5-4811-bf4d-58d37f0bc676", "node_type": "1", "metadata": {}, "hash": "75d01a3296e980e7547126614f436a5fdc222e99ab28d99ed78d146dbae68739", "class_name": "RelatedNodeInfo"}}, "text": "Should\nwe still develop autonomous vehicles, or do we limit this technology to\nsemi-autonomous vehicles which help people drive safely? The jury is still out on this,\nbut these are the types of ethical debates that are occurring as new, innovative AI\ntechnology develops.\nAI impact on jobs\nWhile a lot of public perception of artificial intelligence centers around job losses, this\nconcern should probably be reframed. With every disruptive, new technology, we see\nthat the market demand for specific job roles shifts. For example, when we look at the\nautomotive industry, many manufacturers, like GM, are shifting to focus on electric\nvehicle production to align with green initiatives. The energy industry isn\u2019t going away,\nbut the source of energy is shifting from a fuel economy to an electric one.\nIn a similar way, artificial intelligence will shift the demand for jobs to other areas. There\nwill need to be individuals to help manage AI systems. There will still need to be people\nto address more complex problems within the industries that are most likely to be\naffected by job demand shifts, such as customer service. The biggest challenge with\nartificial intelligence and its effect on the job market will be helping people to transition\nto new roles that are in demand.\nPrivacy\nPrivacy tends to be discussed in the context of data privacy, data protection, and data\nsecurity. These concerns have allowed policymakers to make more strides in recent\nyears. For example, in 2016, GDPR legislation was created to protect the personal data\nof people in the European Union and European Economic Area, giving individuals more\ncontrol of their data. In the United States, individual states are developing policies, such\nas the California Consumer Privacy Act (CCPA), which was introduced in 2018 and\nrequires businesses to inform consumers about the collection of their data. Legislation\nsuch as this has forced companies to rethink how they store and use personally\nidentifiable information (PII). As a result, investments in security have become an\nincreasing priority for businesses as they seek to eliminate any vulnerabilities and\nopportunities for surveillance, hacking, and cyberattacks.\nBias and discrimination\nInstances of bias and discrimination across a number of machine learning systems have\nraised many ethical questions regarding the use of artificial intelligence. How can we\nsafeguard against bias and discrimination when the training data itself may be\ngenerated by biased human processes? While companies typically have good\nintentions for their automation efforts, Reuters (link resides outside ibm.com) highlights\nsome of the unforeseen consequences of incorporating AI into hiring practices. In their\neffort to automate and simplify a process, Amazon unintentionally discriminated against\njob candidates by gender for technical roles, and the company ultimately had to scrap\nthe project. Harvard Business Review (link resides outside ibm.com) has raised other\npointed questions about the use of AI in hiring practices, such as what data you should\nbe able to use when evaluating a candidate for a role.\nBias and discrimination aren\u2019t limited to the human resources function either; they can\nbe found in a number of applications from facial recognition software to social media\nalgorithms.\nAs businesses become more aware of the risks with AI, they\u2019ve also become more\nactive in this discussion around AI ethics and values. For example, IBM has sunset its\ngeneral purpose facial recognition and analysis products.", "start_char_idx": 15332, "end_char_idx": 18869, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9eacc95-1fb5-4811-bf4d-58d37f0bc676": {"__data__": {"id_": "b9eacc95-1fb5-4811-bf4d-58d37f0bc676", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "688cb84b-cc94-40bd-a2b9-a4e08af1d24d", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "29ff3f8e5df934bdde8100837d09b7c15a605c81a97287b369e8766c5814fcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11cea5cc-5531-48a3-be16-bb4eb57fb7a5", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "24f5a0d92a083c071a8011991b10703db8ed776e9c082c889c2f4b2cf99d40a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ecae425-e169-471c-97a8-3977666babfc", "node_type": "1", "metadata": {}, "hash": "c0e23f1e209ec6362aa2e2c8188bc4f9327c1541c0454667e87137f46739ca7c", "class_name": "RelatedNodeInfo"}}, "text": "For example, IBM has sunset its\ngeneral purpose facial recognition and analysis products. IBM CEO Arvind Krishna\nwrote: \u201cIBM firmly opposes and will not condone uses of any technology, including facial\nrecognition technology offered by other vendors, for mass surveillance, racial profiling,\nviolations of basic human rights and freedoms, or any purpose which is not consistent\nwith our values and Principles of Trust and Transparency.\u201d\nAccountability\nSince there isn\u2019t significant legislation to regulate AI practices, there is no real\nenforcement mechanism to ensure that ethical AI is practiced. The current incentives for\ncompanies to be ethical are the negative repercussions of an unethical AI system on the\nbottom line. To fill the gap, ethical frameworks have emerged as part of a collaboration\nbetween ethicists and researchers to govern the construction and distribution of AI\nmodels within society. However, at the moment, these only serve to guide. Some\nresearch (link resides outside ibm.com) shows that the combination of distributed\nresponsibility and a lack of foresight into potential consequences aren\u2019t conducive to\npreventing harm to society.\nRead more about IBM's position on AI Ethics\nHow to choose the right AI platform for machine learning\nSelecting a platform can be a challenging process, as the wrong system can drive up\ncosts, or limit the use of other valuable tools or technologies. When reviewing multiple\nvendors to select an AI platform, there is often a tendency to think that more features =\na better system. Maybe so, but reviewers should start by thinking through what the AI\nplatform will be doing for their organization. What machine learning capabilities need to\nbe delivered and what features are important to accomplish them? One missing feature\nmight doom the usefulness of an entire system. Here are some features to consider.\nMLOps capabilities. Does the system have:\na unified interface for ease of management?\nautomated machine learning tools for faster model creation with low-code\nand no-code functionality?\ndecision optimization to streamline the selection and deployment of\noptimization models?\nvisual modeling to combine visual data science with open-source libraries\nand notebook-based interfaces on a unified data and AI studio?\nautomated development for beginners to get started quickly and more\nadvanced data scientists to experiment?\nsynthetic data generator as an alternative or supplement to real-world data\nwhen real-world data is not readily available?\nGenerative AI capabilities. Does the system have:\na content generator that can generate text, images and other content\nbased on the data it was trained on?\nautomated classification to read and classify written input, such as\nevaluating and sorting customer complaints or reviewing customer\nfeedback sentiment?\na summary generator that can transform dense text into a high-quality\nsummary, capture key points from financial reports, and generate meeting\ntranscriptions?\na data extraction capability to sort through complex details and quickly pull\nthe necessary information from large documents?", "start_char_idx": 18780, "end_char_idx": 21888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ecae425-e169-471c-97a8-3977666babfc": {"__data__": {"id_": "8ecae425-e169-471c-97a8-3977666babfc", "embedding": null, "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\mlflow_airflow.txt", "file_name": "mlflow_airflow.txt", "file_type": "text/plain", "file_size": 3321, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79ca23ff-ccdf-4726-bb72-699ba2a08f82", "node_type": "4", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\mlflow_airflow.txt", "file_name": "mlflow_airflow.txt", "file_type": "text/plain", "file_size": 3321, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}, "hash": "686c529882c0df762ef0fc37cb3bedac8f153c9cef652317c55a5feb4de332ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9eacc95-1fb5-4811-bf4d-58d37f0bc676", "node_type": "1", "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}, "hash": "d795f36c1a7f5ddf95f2987b797f8797bc66ac1d39d91c4fd43a2fee54490197", "class_name": "RelatedNodeInfo"}}, "text": "MLflow\r\nOpen source platform provides tools and simplifying processes to streamline the ML lifecycle (dev, deployment) and foster collaboration among ML practitioners.\r\n\r\nComponents\r\n\r\nMLflow Tracking: provides API & UI to log parameters, code versions, metrics, artifacts during ML process. This centralized repository stores parameters, metrics, artifacts, data, env configs, giving teams insight into their model\u2019s evolution over time. Tracking facilitates logging of results either to localfiles or server, allows to compare multiple runs/experiments across different users\r\nModel Registry: systematic approach to model management\r\nCentralized model store, APIs, UIs; allows to collaboratively manage MLflow model\u2019s life cycle i.e model lineage, versioning, tagging, aliasing,annotations\r\nEvaluate: designed for in depth model analysis, facilitate model comparison i.e traditional ML algorithms or cutting edge LLMs\r\nPrompt Engineering UI: provides space for prompt experimentation, refinement, evaluation, testing, and deployment.\r\nRecipes: Serving as a guide for structuring ML projects\r\nProjects: MLflow Projects standardize the packaging of ML code, workflows, and artifacts, akin to an executable. \r\nEach project, be it a directory with code or a Git repository, employs a descriptor or convention to define its dependencies and execution method\r\n\r\n\r\nAirflow\r\nopen source platform for orchestrating and scheduling, automating complex workflows (create and monitor workflow schedules)\r\nWorkflow: ~ETL (data extraction, transformation, loading: Data Eng; data ingestion, validation, transformation, training \u2026 Data Sci)\r\nAirflow \r\norchestrates various steps of your pipeline/ workflow\r\nAirflow \u2192 developed by Airbnd in 2014 as data management, orchestrating workflows makes data eng effective\r\nuser friendly UI, higher scalability, easier scheduling workflows\r\nAIRFLOW -> best data orchestration tool for data eng\u2019s\r\n\r\nBest Use-cases:\r\nETL for data eng, data warehouse, data analysis\r\nAutomates\u2014> extracting data from various sources, transforms data and load into data warehouse. Maintains accuracy of data, to go tool for managing automation of complex datasets ETL\r\n\r\nBenefits: \r\nhigher flexibility (can optimize workflows to your need), scalability (simple to petabyte data), operators and sensors, plugin ecosys, community support (popular). \r\nRobust workflow automation tool \u2192 orchestrates data pipelines very easily\r\n\r\nSetup airflow in windows\r\nNeed Docker Desktop, VSCode in your pc\r\nCreate project folder in vscode\r\nDownload file: https:airflow.apache.org/docs/apache-airflow/2.5.1/docker-compose.yaml\r\nCreate .env folder, add\r\nAIRFLOW_IMAGE_NAME= apache/airflow:2.4.2\r\nAIRFLOW_UID=50000\r\nOpen terminal \u2192 docker-compose up -d (sets up airflow automatically)\r\nLocalhost:8080 -> airflow window -> username: admin, password: admin\r\nOpen terminal \u2014> type this\r\ndocker-compose run airflow-scheduler airflow users create --username adminn --password admin --firstname Admin --lastname User --role Admin --email admin@superhero.org\r\n\r\nComponents of Airflow\r\nDAGs: Directed Acyclic Graphs\u2192 mathematical structures represent workflow as a collection of tasks connected by dependencies. DAGs ensure tasks execute in a specific order, with no circular dependencies or loops.", "start_char_idx": 0, "end_char_idx": 3279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"2ec04f1c-2e64-4778-b932-83a3c48c1dc6": {"node_ids": ["d7183e10-924e-4318-a274-37c07b3ccde6", "390c2553-a384-43f0-b771-b12865273c74", "c1d59dd5-1b58-492b-ac87-4988bba89311", "73585fe0-6f5a-462d-ac7d-7fdfa52e18c8", "373dc6d4-f314-404e-b5f9-ea60863682f1"], "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\AI.txt", "file_name": "AI.txt", "file_type": "text/plain", "file_size": 17688, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}}, "688cb84b-cc94-40bd-a2b9-a4e08af1d24d": {"node_ids": ["1361e285-35f3-4344-b1df-c073532fd75d", "f877044c-7055-482a-9b93-2594b4f69baa", "2da1c1f4-3019-46cb-b207-7b9a467da07c", "31b5c8b8-233e-4e5c-bbe7-e70f007e7b2b", "11cea5cc-5531-48a3-be16-bb4eb57fb7a5", "b9eacc95-1fb5-4811-bf4d-58d37f0bc676"], "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 21968, "creation_date": "2024-04-25", "last_modified_date": "2024-04-25"}}, "79ca23ff-ccdf-4726-bb72-699ba2a08f82": {"node_ids": ["8ecae425-e169-471c-97a8-3977666babfc"], "metadata": {"file_path": "C:\\Users\\anjik\\Desktop\\MLOPs_projects\\QA_System\\Data\\mlflow_airflow.txt", "file_name": "mlflow_airflow.txt", "file_type": "text/plain", "file_size": 3321, "creation_date": "2024-04-28", "last_modified_date": "2024-04-28"}}}}